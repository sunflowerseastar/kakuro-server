* kakuro-server

This is a kakuro solver with a single ~solve/~ endpoint for the [[https://github.com/sunflowerseastar/kakuro][front end]]. It receives a specific *clue notation* input and returns a *solution vector*.

#+begin_src
input: [[:d 1 0 4 2] [:d 2 0 6 2] [:r 0 1 3 2] [:r 0 2 7 2]]
solution: [1 2 3 4]
#+end_src

* Quick Start

#+begin_src sh
lein ring server-headless
curl localhost:3001 # => "ok"
#+end_src

* Overview

This:

|      | :d 4 | :d 6 |
| :r 3 |      |      |
| :r 7 |      |      |

corresponds to the following clue notation:

#+begin_src clojure
;; [:direction x y sum distance]

(def clue-notation
  [[:d 1 0 4 2]
   [:d 2 0 6 2]
   [:r 0 1 3 2]
   [:r 0 2 7 2]])
#+end_src

The main solver function is ~clue-notation->solution-vector~. The solution values, ~1 2 3 4~, correspond to the available *entry* square types. A *black* square type means there is "nothing" there, no clues and no entry. Here's the same grid as before, with the square types made explicit:

| black       | clue ~:d 4~ | clue ~:d 6~ |
| clue ~:r 3~ | entry ~0~   | entry ~1~   |
| clue ~:r 7~ | entry ~2~   | entry ~3~   |

The number for each entry corresponds to the ~n~th element of the solution vector, ~[1 2 3 4]~:

|      | :d 4 | :d 6 |
| :r 3 |    1 |    2 |
| :r 7 |    3 |    4 |

The front-end is responsible for placing a solution back onto the board.

** API

For endpoint ~solve/~, put the clue-notation in a map:

#+begin_src clojure
{:clue-notation clue-notation}
#+end_src

Response:

#+begin_src clojure
{:status :ok :solution [1 2 3 4]}
#+end_src

* Reference

- http://www.freexsums.com/instruct.html
- http://www.freexsums.com/advanced.html

- https://www.lvh.io/posts/solving-regex-crosswords/

#+begin_src clojure
(l/run* [q]
  (l/fresh [x y z]
    (l/== [x y z] q)
    (f/in x y z (f/interval 2 5))
    (f/eq (= 10 (+ x y z)))))
#+end_src

- clojail, thunk-timeout - https://stackoverflow.com/a/6697356
  - https://github.com/flatland/clojail

#+begin_quote
Enter a non-zero single-decimal-digit number into each cell such that each "entry" (orthogonal line of contiguous cells) contains no duplicate numbers and that the sum of the numbers in each entry matches the number in the "flag" (black triangle) incident upon and collinear with that entry.
#+end_quote

- https://zotmeister.livejournal.com/11067.html
